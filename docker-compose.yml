version: "3"

networks:
  my_network:
    driver: bridge

x-airflow-common: &airflow-common
  build:
    context: ./containers/airflow/
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW__CORE__SQL_ALCHEMY_CONN}
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: ${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}
    AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
    AIRFLOW__API__AUTH_BACKEND: ${AIRFLOW__API__AUTH_BACKEND}
    AIRFLOW_CONN_POSTGRES_DEFAULT: ${AIRFLOW_CONN_POSTGRES_DEFAULT}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./data:/opt/airflow/data
    - ./visualization:/opt/airflow/visualization
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./tests:/opt/airflow/tests
    - ./temp:/opt/airflow/temp
    - ./jars:/opt/airflow/jars
    - ./jars:/opt/spark/jars-extra
    - ./jobs:/opt/jobs

  user: "${AIRFLOW_UID:-root}:${AIRFLOW_GID:-root}"
  depends_on:
    postgres:
      condition: service_healthy
  env_file:
    - .env
  networks:
    - my_network

services:
  postgres:
    container_name: postgres
    image: postgres:${POSTGRES_TAG}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./containers/upstream:/docker-entrypoint-initdb.d
      - ./data:/input_data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      retries: 5
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - my_network

  airflow-webserver:
    <<: *airflow-common
    container_name: webserver
    command: webserver
    ports:
      - "${AIRFLOW_WEB_PORT}:8080"
    environment:
      - PYTHONPATH=/opt/airflow:/opt/airflow/dags:/opt/airflow/plugins:/opt/airflow/variables
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # ðŸ‘ˆ add this
      - ./dags:/opt/airflow/dags
      - ./variables:/opt/airflow/variables
      - ./data:/opt/airflow/data
      - ./visualization:/opt/airflow/visualization
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./tests:/opt/airflow/tests
      - ./temp:/opt/airflow/temp
      - ./jars:/opt/airflow/jars
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    env_file:
      - .env
    networks:
      - my_network

  airflow-scheduler:
    <<: *airflow-common
    container_name: scheduler
    command: scheduler
    environment:
      - PYTHONPATH=/opt/airflow:/opt/airflow/dags:/opt/airflow/plugins:/opt/airflow/variables
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # ðŸ‘ˆ add this
      - ./dags:/opt/airflow/dags
      - ./variables:/opt/airflow/variables
      - ./data:/opt/airflow/data
      - ./visualization:/opt/airflow/visualization
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./tests:/opt/airflow/tests
      - ./temp:/opt/airflow/temp
      - ./jars:/opt/airflow/jars
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "${HOSTNAME}"',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    env_file:
      - .env
    networks:
      - my_network

  airflow-init:
    <<: *airflow-common
    command: bash -c "python /opt/airflow/setup_conn.py && airflow version"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD}
    networks:
      - my_network

  minio:
    image: minio/minio:latest
    hostname: minio
    container_name: minio
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server --console-address ":9001" /data
    networks:
      - my_network

  spark:
    build:
      context: ./containers/spark/
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=0.0.0.0
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
      - SPARK_CLASSPATH=/opt/spark/jars-extra/* # ðŸ‘ˆ
      - SPARK_EXTRA_CLASSPATH=/opt/spark/jars-extra/*
    image: my-spark:3.5
    container_name: spark
    ports:
      - "8081:8080"
      - "7077:7077"
    volumes:
      - ./jars:/opt/spark/jars-extra
      - ./jobs:/opt/jobs
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]

  spark-worker:
    image: my-spark:3.5
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_CLASSPATH=/opt/spark/jars-extra/* # ðŸ‘ˆ
      - SPARK_EXTRA_CLASSPATH=/opt/spark/jars-extra/*
    depends_on:
      - spark
    volumes:
      - ./jars:/opt/spark/jars-extra
      - ./jobs:/opt/jobs
    networks:
      - my_network
